* TPHmacs
  This is the de facto place for you to add your own configuration, as
  well as taking a look at what it already holds.
* Big yeets
  Adding a custom-file and holding it in ~/dev/zero~ ensures that our
  configuration will not be filled with customization options that you have
  done through other means than adding them here.

  We also yeeted the menu-bar, toolbar and the scroll-bar, our
  configuration does not need all that, as shortcuts should be the
  only means of navigating through Emacs.

  Giving you line-numbers and column-numbers is shown in the modeline
  and when you are not using org-mode, it will also be shown in the
  buffer as well.
#+BEGIN_SRC emacs-lisp
;; Yeeting custom stuff. 
(defconst custom-file "/dev/zero")

(when (display-graphic-p)
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (toggle-scroll-bar -1))

(global-display-line-numbers-mode)

(setq inhibit-startup-message t)
(line-number-mode t)
(column-number-mode t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq-default locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

* Package Archives (and use-package)
  In order to make it easy for you to configure packages as well as
  downloading them, we suggest using =use-package= as the default way of
  downloading/configuring/compiling packages.
  
  This base gives you the packages archives of elpa and melpa, the
  biggest and only package archives worth caring about, it also has
  the =gnutls-algorithm-priority= which should obsolete by the Emacs
  26.3 update.
#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-enable-at-startup nil)

;; Package archives
(add-to-list 'package-archives '("elpa" . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))

(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(use-package use-package
  :config
  (setq-default use-package-always-defer nil
		  use-package-always-ensure t
		  use-package-always-demand t))

(setq-default byte-compile-warnings nil)
(setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
(use-package use-package-ensure-system-package)

(use-package try)
#+END_SRC
* Evil
  The extensible vi layer emulates the main features of Vim and adds
  them onto Emacs. This is something which is essential for any former
  Vim user and works right out of the box without any specific
  configuration additions, however evil depends on undo-tree, so if
  you want evil you better keep =undo-tree= as well
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t)

(use-package evil
    :after undo-tree
    :ensure t
    :config
    (evil-mode 1))

; evil escape
(use-package evil-escape)
(evil-escape-mode t)

(setq-default evil-escape-key-sequence "fd")
(setq-default evil-escape-delay 0.2)
#+END_SRC

* GUI Changes
  This configuration uses Doom Themes in order to get a good
  colorscheme and Doom Themes are the very best, this specific config
  gives an option for you that if you want neotree, then the
  colorscheme will help give it it's final form which is breathtaking.

  This will also add the doom modeline which is a great improvement to
  the current modeline.
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
      :ensure t
      :config
      (load-theme 'doom-vibrant t)
      (doom-themes-org-config)
      (doom-themes-neotree-config)
      :custom
      (doom-vibrant-brighter-comments t))


  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode)
    :config
    (setq doom-modeline-height 30))
#+END_SRC
